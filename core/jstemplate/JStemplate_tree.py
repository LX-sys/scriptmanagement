# -*- coding: utf-8 -*-

# self implementation generated from reading ui file 'JStemplate_tree.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import copy

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QWidget, QListWidgetItem
from PyQt5 import QtCore, QtGui, QtWidgets



class JSTemplate(QWidget):
    def __init__(self, *args,**kwargs) -> None:
        super().__init__(*args,**kwargs)
        # 模板编号和具体内容
        self.__template_dict = {
            "id": -1,
        }

        self.setupUi()
        self.myEvent()
        self.Init()

    def Init(self):
        self.setTitle("代码片段")
        self.addTemplate("清空谷歌进程代码", code='''import os
os.system('taskkill /im chromedriver.exe /F')''')
        self.addTemplate("获取当前年龄", code='''
def getAge():
    from datetime import datetime as dt
    Birth = Year_Of_Birth + "-" + Month_Of_Birth.zfill(2) + "-" + Day_Of_Birth.zfill(2)
    return (dt.now()-dt.strptime(Birth,"%Y-%m-%d")).days//365''')
        self.addTemplate("美国时间",
                         code='''Birth = Month_Of_Birth.zfill(2) + "-" + Day_Of_Birth.zfill(2) + "-" + Year_Of_Birth''')
        self.addTemplate("LP模板", code='''
try:
   a_1 = am.see("xpath",'xxx')[0]
   a_2 = am.see("xpath",'xxx')[0]
   e=random.choice([a_1])
   driver.execute_script("arguments[0].scrollIntoView(false);", e)
   am.click(e)

   if e == a_1:
       win_handles = driver.window_handles
       driver.switch_to.window(win_handles[-1])
except:
    pass
time.sleep(random.randint(10,15))''')
        self.addTemplate("移除空白", code=r'''
def reblank(text):
    import re
    import copy

    s="移除空白函数类似下面这种"
    s= "Adasd ASD       1kld Uca     "
    s= r"Adasd ASD\n       1kld Uca     "
    s= "Adasd ASD" + r"\n" + "       1kld Uca     "
    s = "这是注释说明"

    if "\n" in text:
        return re.sub(r"\n.*?\S"," ",text,re.M)
    else:
        text = text.strip().split(" ")
        copy_text = copy.deepcopy(text)
        for t in copy_text:
            if not t:
                text.remove(t)
        return " ".join(text)
''')
        self.addTemplate("元素居中", code='''driver.execute_script("arguments[0].scrollIntoView();", e)''')

    def setTitle(self,title:str):
        self.setWindowTitle(title)

    def setupUi(self):
        self.setObjectName("self")
        self.resize(1064, 673)
        self.setStyleSheet("QWidget{\n"
"    font: 11pt \"黑体\";\n"
"    border:1px solid gray;\n"
"}\n"
"QPushButton#btn_ok{\n"
"border:none;\n"
"color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 85, 255);\n"
"}\n"
"QPushButton#btn_ok:hover{\n"
"    background-color: rgb(0, 123, 255);\n"
"}\n"
"QPushButton#btn_ok:pressed{\n"
"    background-color: rgb(0, 52, 157);\n"
"}\n"
"QPushButton#btn_c{\n"
"    color: rgb(241, 241, 241);\n"
"    background-color: rgb(135, 135, 135);\n"
"}\n"
"QPushButton#btn_c:pressed{\n"
"    background-color: rgb(58, 58, 58);\n"
"}")
        self.gridLayout = QtWidgets.QGridLayout(self)
        self.gridLayout.setContentsMargins(5, 3, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.lineEdit_search = QtWidgets.QLineEdit(self)
        self.lineEdit_search.setMinimumSize(QtCore.QSize(197, 40))
        self.lineEdit_search.setMaximumSize(QtCore.QSize(197, 40))
        self.lineEdit_search.setStyleSheet("border-top:none;\n"
"border-right:none;\n"
"border-left:none;")
        self.lineEdit_search.setObjectName("lineEdit_search")
        self.gridLayout.addWidget(self.lineEdit_search, 0, 0, 1, 1)
        self.btn_ok = QtWidgets.QPushButton(self)
        self.btn_ok.setMinimumSize(QtCore.QSize(58, 40))
        self.btn_ok.setMaximumSize(QtCore.QSize(58, 40))
        self.btn_ok.setObjectName("btn_ok")
        self.gridLayout.addWidget(self.btn_ok, 0, 1, 1, 1)
        self.textEdit_code = QtWidgets.QTextEdit(self)
        self.textEdit_code.setStyleSheet("border:none;")
        self.textEdit_code.setObjectName("textEdit_code")
        self.gridLayout.addWidget(self.textEdit_code, 0, 2, 2, 2)
        self.listWidget_title = QtWidgets.QListWidget(self)
        self.listWidget_title.setMaximumSize(QtCore.QSize(256, 16777215))
        self.listWidget_title.setStyleSheet("border-top:none;\n"
"border-left:none;\n"
"border-bottom:none;")
        self.listWidget_title.setObjectName("listWidget_title")
        self.gridLayout.addWidget(self.listWidget_title, 1, 0, 2, 2)
        spacerItem = QtWidgets.QSpacerItem(760, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 2, 2, 1, 1)
        self.btn_c = QtWidgets.QPushButton(self)
        self.btn_c.setMinimumSize(QtCore.QSize(41, 30))
        self.btn_c.setMaximumSize(QtCore.QSize(41, 30))
        self.btn_c.setObjectName("btn_c")
        self.gridLayout.addWidget(self.btn_c, 2, 3, 1, 1)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def getID(self) -> int:
        return self.__template_dict["id"]

    # 给对应ID的模板设置内容
    def addCode(self,id:int,code:str):
        if self.__template_dict.get(str(id),None) is None:
            self.__template_dict[str(id)] = code

    def getCode(self,id:int):
        return self.__template_dict.get(str(id),None)

    def addTemplate(self, title:str,code:str=""):
        item = QListWidgetItem()
        item.setText(title)
        self.__template_dict["id"] += 1
        self.addCode(self.__template_dict["id"],code)
        self.listWidget_title.addItem(item)

    # 写代码到文本框
    def writeCode(self,code:str):
        self.textEdit_code.clear()
        self.textEdit_code.setText(code)

    # 树子项点击事件
    def code_Event(self,item:QListWidgetItem):
        # 获得索引
        index = self.listWidget_title.indexFromItem(item).row()
        # 获得代码
        code = self.getCode(index)
        # print(code)
        self.writeCode(code)

    # 搜索子项点击事件
    def search_Event(self,text:str):
        # 获得索引
        item = self.listWidget_title.findItems(text,Qt.MatchContains)
        index=self.listWidget_title.indexFromItem(item[0]).row()
        # 获得代码
        code = self.getCode(index)
        self.writeCode(code)


    def myEvent(self):
        #listWidget_title的点击事件
        self.listWidget_title.itemClicked.connect(self.code_Event)
        # 搜索子项点击事件
        self.btn_ok.clicked.connect(lambda:self.search_Event(self.lineEdit_search.text()))

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("self", "self"))
        self.lineEdit_search.setPlaceholderText(_translate("self", "搜索"))
        self.btn_ok.setText(_translate("self", "确定"))
        self.btn_c.setText(_translate("self", "复制"))

if __name__ == '__main__':
    app = QApplication(sys.argv)

    win = JSTemplate()
    win.show()

    sys.exit(app.exec_())
    